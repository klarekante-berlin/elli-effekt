# Elli-Effekt Project Development Guidelines 2.0
# A comprehensive guide for development with React, TypeScript, GSAP, Zustand, and Web Core Vitals

# 1. Core Development Philosophy
- Clean Code and maintainability are top priorities
- Performance-First approach with Web Core Vitals
- Component-driven development
- Accessibility as a fundamental principle
- Mobile-First and Responsive Design
- Atomic Design principles

# 2. Project Structure
src/
  ├── components/        # Reusable UI components
  │   ├── atoms/        # Basic UI elements
  │   ├── molecules/    # Composite UI elements
  │   ├── organisms/    # Complex UI components
  │   └── templates/    # Page layouts
  ├── scenes/           # Main application scenes
  ├── stores/           # State store definitions
  ├── styles/           # CSS modules and global styles
  ├── hooks/            # Custom React hooks
  ├── types/            # TypeScript definitions
  ├── utils/            # Helper functions
  ├── assets/           # Static assets
  │   ├── videos/       # Video files
  │   ├── images/       # Image files
  │   └── svg/          # SVG assets
  └── transcription_data/ # Transcription data

# 3. State Management with Zustand
@Zustand @React

## Chain of Thought for Store Development
1. Store Planning
   - What data needs to be stored?
   - Which components need access?
   - How frequent are updates expected?
   - What initialization logic is needed?

2. Store Definition
   - Define TypeScript interface
   - Set initial state
   - Plan actions/mutations
   - Consider loading states

3. Store Implementation
   - Create Zustand store
   - Define selectors
   - Implement performance optimizations
   - Implement error handling

4. Store Integration
   - Connect components
   - Implement subscribe logic
   - Ensure cleanup
   - Test initialization logic

## Store Best Practices
```typescript
// Store Definition with Initialization
interface IStore {
  data: TData;
  isLoading: boolean;
  error: Error | null;
  isInitialized: boolean;
}

const useStore = create<IStore>((set) => ({
  data: initialData,
  isLoading: false,
  error: null,
  isInitialized: false,

  initialize: async () => {
    if (get().isInitialized) return;
    
    set({ isLoading: true });
    try {
      const data = await fetchData();
      set({ data, isInitialized: true, isLoading: false });
    } catch (error) {
      set({ error, isLoading: false });
    }
  },

  // Actions...
}));

// Component Integration
const Component: FC = () => {
  const { isInitialized, initialize, isLoading, error } = useStore();

  useEffect(() => {
    initialize();
  }, []);

  if (!isInitialized) return <LoadingState />;
  if (error) return <ErrorState error={error} />;
  
  return <Content />;
};
```

## Performance Optimization
- Selective updates with immer/produce
- Shallow/Deep equality checks
- Memoization for complex selectors
- Batching for multiple updates
- DevTools for debugging

# 4. GSAP Animation Standards
@GSAP @React

## Chain of Thought for Animations
1. Animation Planning
   - Which elements need animation?
   - What triggers the animation?
   - How complex is the timeline?
   - What are the performance requirements?

2. Implementation
   - Set up GSAP
   - Create timeline
   - Optimize performance
   - Ensure cleanup

## Animation Best Practices
```typescript
// GSAP Setup with React
import { useGSAP } from '@gsap/react';
import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';

gsap.registerPlugin(ScrollTrigger);

const AnimationComponent: FC = () => {
  const container = useRef<HTMLDivElement>(null);

  useGSAP(() => {
    const timeline = gsap.timeline({
      scrollTrigger: {
        trigger: container.current,
        start: 'top center',
        end: 'bottom center',
        scrub: true
      }
    });

    timeline
      .to(/* Animation */);

    return () => timeline.kill();
  }, { scope: container });

  return <div ref={container}>{/* Content */}</div>;
};
```

## Performance Optimization
- Use will-change only for active animations
- Prioritize transform and opacity
- Batch animations in timelines
- Use RequestAnimationFrame for custom animations
- Utilize GPU-accelerated properties

# 5. Component Standards
@React

## Component Structure
```typescript
interface IComponentProps {
  // Props with TypeScript interface
}

export const Component: FC<IComponentProps> = memo(({ props }) => {
  // Hooks at the beginning
  const [state, setState] = useState<TState>();
  const memoizedValue = useMemo(() => computeValue(), [deps]);
  const memoizedCallback = useCallback(() => handleEvent(), [deps]);

  // Event handlers
  const handleEvent = () => {
    // Implementation
  };

  // Render
  return (
    <div>
      {/* JSX */}
    </div>
  );
});
```

## Best Practices
- Functional components with TypeScript
- Props interfaces for each component
- Explicit return types
- Memoization for performance
- Proper cleanup in useEffect
- Implement error boundaries

# 6. Performance Standards
## Web Core Vitals
- LCP < 2.5s
- FID < 100ms
- CLS < 0.1

## Optimizations
- Code splitting
- Lazy loading
- Asset optimization
- Bundle size monitoring
- Performance monitoring

# 7. Testing Standards
## Unit Tests
```typescript
describe('Component', () => {
  it('should render correctly', () => {
    render(<Component />);
    expect(screen.getByRole('button')).toBeInTheDocument();
  });

  it('should handle user interactions', async () => {
    render(<Component />);
    await userEvent.click(screen.getByRole('button'));
    expect(handleClick).toHaveBeenCalled();
  });
});
```

## Test Coverage
- Unit tests: > 80%
- Integration tests
- E2E tests
- Performance tests
- A11y tests

# 8. Code Style
## General
- Indentation: 2 spaces
- Maximum line length: 100
- Semicolons required
- Single quotes for strings

## Naming
- Components: PascalCase
- Functions: camelCase
- CSS classes: kebab-case
- Interfaces: IPascalCase
- Types: TPascalCase

# 9. Development Workflow
## Chain of Thought
1. Requirements analysis
2. Implementation planning
3. Development (TDD/BDD)
4. Testing & QA
5. Code review
6. Deployment

## Review Checklist
- Code quality (TypeScript, ESLint, Prettier)
- Performance (Bundle size, Render, Animation)
- Tests (Coverage, Edge cases)
- Documentation (JSDoc, README, API docs)

# 10. Store Management and Zustand
@Zustand @React @TypeScript

## Store Architecture
1. Base Store (baseStore)
   - Global app states
   - Scroll management
   - Animation flags
   - Persistence configuration

2. Scene Store (sceneStore)
   - Scene navigation
   - Scene states
   - Transitions
   - Scene types and validation

3. Video Store (videoStore)
   - Video control
   - Playback states
   - Video synchronization
   - Scene integration

## Store Development Chain of Thought
1. Requirements Analysis
   - Which components access the store?
   - Which scenes are affected?
   - What states need to be managed?
   - What actions are needed?

2. Interface Definition
   - Define state interfaces
   - Define action interfaces
   - Set up types and enums
   - Implement validations

3. Store Implementation
   - Configure middleware
   - Define selectors
   - Implement actions
   - Set up persistence

4. Component Integration
   - Integrate store hooks in components
   - Implement scene-specific logic
   - Perform performance optimizations
   - Ensure cleanup

## Store Best Practices
```typescript
// Store Definition
interface IStore {
  // State
  state: TState;
  isLoading: boolean;
  error: Error | null;
  
  // Metadata
  lastUpdated: number;
  version: string;
  
  // Actions
  initialize: () => Promise<void>;
  update: (data: Partial<TState>) => void;
  reset: () => void;
}

// Store Creation
export const useStore = create<IStore>()(
  devtools(
    persist(
      (set, get) => ({
        // Implementation
      }),
      {
        name: 'store-name',
        version: 1,
        partialize: (state) => ({
          // Persisted fields
        })
      }
    )
  )
);

// Component Integration
const Component: FC = () => {
  const store = useStore();
  
  useEffect(() => {
    // Initialization
    return () => {
      // Cleanup
    };
  }, []);
  
  return <Content />;
};
```

## Performance Optimization
- Selective re-renders with selectors
- Memoization for complex calculations
- Batching for multiple updates
- Lazy loading for large stores

## Store-Scene Integration
```typescript
// Scene-specific store logic
interface SceneStore extends BaseStore {
  // Scene states
  sceneStates: Record<SceneId, SceneState>;
  
  // Scene actions
  enterScene: (sceneId: SceneId) => void;
  exitScene: (sceneId: SceneId) => void;
  
  // Transitions
  transitionTo: (targetScene: SceneId) => void;
}

// Scene component with store integration
const Scene: FC<SceneProps> = ({ id }) => {
  const { 
    sceneState,
    enterScene,
    exitScene
  } = useSceneStore();
  
  useEffect(() => {
    enterScene(id);
    return () => exitScene(id);
  }, [id]);
  
  return <Content />;
};
```

## Debugging and Testing
- DevTools integration
- Action logging
- State snapshots
- Automated tests

## Error Handling
- Define error states
- Recovery strategies
- User feedback
- Logging and monitoring
